// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/draw.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace gRPCServer {
  /// <summary>
  /// The greeting service definition.
  /// </summary>
  public static partial class Draw
  {
    static readonly string __ServiceName = "draw.Draw";

    static readonly grpc::Marshaller<global::gRPCServer.DrawPointRequest> __Marshaller_draw_DrawPointRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::gRPCServer.DrawPointRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::gRPCServer.DrawPoint> __Marshaller_draw_DrawPoint = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::gRPCServer.DrawPoint.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::gRPCServer.IdRequest> __Marshaller_draw_IdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::gRPCServer.IdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::gRPCServer.IdResponse> __Marshaller_draw_IdResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::gRPCServer.IdResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::gRPCServer.DrawPointRequest, global::gRPCServer.DrawPoint> __Method_DrawPoints = new grpc::Method<global::gRPCServer.DrawPointRequest, global::gRPCServer.DrawPoint>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "DrawPoints",
        __Marshaller_draw_DrawPointRequest,
        __Marshaller_draw_DrawPoint);

    static readonly grpc::Method<global::gRPCServer.IdRequest, global::gRPCServer.IdResponse> __Method_ReceiveId = new grpc::Method<global::gRPCServer.IdRequest, global::gRPCServer.IdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReceiveId",
        __Marshaller_draw_IdRequest,
        __Marshaller_draw_IdResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::gRPCServer.DrawReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Draw</summary>
    [grpc::BindServiceMethod(typeof(Draw), "BindService")]
    public abstract partial class DrawBase
    {
      public virtual global::System.Threading.Tasks.Task DrawPoints(grpc::IAsyncStreamReader<global::gRPCServer.DrawPointRequest> requestStream, grpc::IServerStreamWriter<global::gRPCServer.DrawPoint> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::gRPCServer.IdResponse> ReceiveId(global::gRPCServer.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DrawBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_DrawPoints, serviceImpl.DrawPoints)
          .AddMethod(__Method_ReceiveId, serviceImpl.ReceiveId).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DrawBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_DrawPoints, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::gRPCServer.DrawPointRequest, global::gRPCServer.DrawPoint>(serviceImpl.DrawPoints));
      serviceBinder.AddMethod(__Method_ReceiveId, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::gRPCServer.IdRequest, global::gRPCServer.IdResponse>(serviceImpl.ReceiveId));
    }

  }
}
#endregion
